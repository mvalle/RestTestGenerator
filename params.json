{"name":"Rest Test Generator","tagline":"A Program that produces tests for REST endpoints, based on a simple specification.","body":"# Motivation for this project\r\nFor my final year project, I'll have to write a simple DSL and a code generator. In order to get my feet wet, I've decided to write a very simple code generator and a DSL/specification format.\r\n\r\nIn Addition to this, I've decided to write down some of the lessons I've learned along the way.\r\n\r\n## Parsing is not that hard\r\nSure, if you want to parse C - good luck. But when using a very simple language, parsing is not really that hard.\r\n\r\nIn this project I just used some `.split()` calls and some simple loops. That was all that I needed for this project. That being said, the parser is probably the most complex piece of code in this project.\r\n\r\nI can see that if you want to parse something a bit more difficult, a custom parsing tool will be useful. For future versions, I'm planning maybe adding more information to the spec, fx. \"this path requires that you are authenticated\". For that, I might need to use a parsing tool, but I think I can squeeze some more juice out some good'ol string manipulation tools.\r\n\r\n## Code generation gets messy quickly\r\nString manipulation, might work for parsing, but not so much with code generation. It get's messy very quickly.\r\n\r\nOne of the downsides to using strings is that they are embedded in the code, and it get's confusing to look at. Especially when the host and target language are the same - there is python code in strings inside more python code.\r\n\r\nUsing nested string formatting, does alleviate some of the pain. I used it here when creating methods inside classes. It allows some separation of concern. But they are still tightly coupled. \r\nA better alternative would be better use templates that can take care of the code generation.\r\n\r\nI've used templating, when generating HTML, and I see no reason why I can't use the same tools to generate code. I've only ever used django.template and Genshi. Genshi is out, as the templating engine will need to be text-based, as opposed to XML-based, because obvously Python is not XML. It also needs to preserve white space, because Python is, well, Python is Python.\r\n\r\nSpeaking of which...\r\n\r\n## Python is not a great target for code generation\r\nIt's not that it can't be done, it's just that it's inconvenient.\r\n\r\nIt's mostly because of the whitespace. No. Strike that. It's entirely because of the whitespace.\r\n\r\nIt you only have two specific levels of indentions, as I had in this case, it works fine. If, on the other had, you have arbitrary nesting, and the output of one procedure can be used in several places with different levels of indentions, then it gets sticky. \r\n\r\nIf you're generating an other { language }, then you could just spew some code and not care about the formatting at all. Then when the whole code is generated, run it through a beautifier.\r\n\r\nThe reason I chose Python as the target language for this project is entirely because of the `requests` library. Recently I used it in a project. After trying various other approaches to testing REST endpoints, using `requests` it was like a breath of fresh air. It's just so easy to use. That's nothing to sneeze at. The generated code is just the beginning. The code has to be edited afterwards, and for that reason I'll stick with generating Python. At lest for now.\r\n\r\n##  Other lessons\r\n### setup.py\r\nI've been writing Python on and off for about 6-7 years, since about Python 2.5 or 2.4. I think I started learning Python (and coding in general) on Ubuntu 5.04, and that's about now 8 years old now.\r\n\r\nIn all that time, I've never written a setup.py file. That probably says more about what code I've been writing, than anything else. I started writing one for this project, but decided to not commit it. I just need to read up on it a bit more, a create a proper one.\r\n\r\n### Parsing command line arguments\r\nCommand line arguments are a whole different parsing problem. This version one contains very simple command line arguments. For future releases, I doubt there will be any less arguments. I've looked around and seen a couple of libraries for parsing command line arguments. They should do.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}